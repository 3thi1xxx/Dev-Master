<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fast Meme Trading Dashboard - Real-Time</title>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.3.0/dist/chart.umd.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #0a0a0a;
            color: #e0e0e0;
            overflow-x: hidden;
        }
        
        .dashboard {
            display: grid;
            grid-template-columns: 1fr 300px;
            grid-template-rows: 60px 1fr;
            height: 100vh;
            gap: 1px;
            background: #1a1a1a;
        }
        
        .header {
            grid-column: 1 / -1;
            background: #1a1a1a;
            border-bottom: 2px solid #00ff88;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 20px;
        }
        
        .logo {
            font-size: 24px;
            font-weight: bold;
            background: linear-gradient(45deg, #00ff88, #00ffff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .status {
            display: flex;
            gap: 20px;
            align-items: center;
        }
        
        .status-item {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
        }
        
        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #00ff88;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .main-content {
            background: #0a0a0a;
            padding: 20px;
            overflow-y: auto;
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            grid-template-rows: auto 250px 1fr;
            gap: 20px;
        }
        
        .stats-grid {
            grid-column: 1 / -1;
            display: grid;
            grid-template-columns: repeat(6, 1fr);
            gap: 15px;
        }
        
        .stat-card {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s;
        }
        
        .stat-card:hover {
            border-color: #00ff88;
            transform: translateY(-2px);
        }
        
        .stat-value {
            font-size: 28px;
            font-weight: bold;
            margin: 10px 0;
        }
        
        .stat-label {
            font-size: 12px;
            color: #888;
            text-transform: uppercase;
        }
        
        .stat-change {
            font-size: 14px;
            margin-top: 5px;
        }
        
        .positive { color: #00ff88; }
        .negative { color: #ff4444; }
        .neutral { color: #ffaa00; }
        
        .chart-container {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 12px;
            padding: 20px;
        }
        
        .chart-title {
            font-size: 16px;
            margin-bottom: 15px;
            color: #fff;
        }
        
        .opportunities-container {
            grid-column: 1 / -1;
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 12px;
            padding: 20px;
        }
        
        .opportunity-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
            max-height: 400px;
            overflow-y: auto;
        }
        
        .opportunity-card {
            background: #0f0f0f;
            border: 1px solid #333;
            border-radius: 8px;
            padding: 15px;
            display: grid;
            grid-template-columns: auto 1fr auto;
            gap: 15px;
            align-items: center;
            transition: all 0.3s;
            animation: slideIn 0.5s ease-out;
        }
        
        @keyframes slideIn {
            from {
                transform: translateX(-100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        .opportunity-card.high-score {
            border-color: #00ff88;
            box-shadow: 0 0 20px rgba(0, 255, 136, 0.3);
        }
        
        .opportunity-score {
            font-size: 32px;
            font-weight: bold;
            text-align: center;
        }
        
        .opportunity-details {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .opportunity-symbol {
            font-size: 18px;
            font-weight: bold;
        }
        
        .opportunity-metrics {
            display: flex;
            gap: 15px;
            font-size: 14px;
        }
        
        .opportunity-action {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 5px;
        }
        
        .recommendation {
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
            font-size: 14px;
        }
        
        .recommendation.buy {
            background: #00ff88;
            color: #000;
        }
        
        .recommendation.watch {
            background: #ffaa00;
            color: #000;
        }
        
        .recommendation.skip {
            background: #666;
            color: #fff;
        }
        
        .sidebar {
            background: #0a0a0a;
            border-left: 1px solid #333;
            padding: 20px;
            overflow-y: auto;
        }
        
        .live-feed {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .feed-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .live-indicator {
            width: 10px;
            height: 10px;
            background: #ff0000;
            border-radius: 50%;
            animation: blink 1s infinite;
        }
        
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.3; }
        }
        
        .feed-item {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 8px;
            padding: 10px;
            font-size: 13px;
            animation: fadeIn 0.3s ease-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .feed-time {
            font-size: 11px;
            color: #666;
        }
        
        .momentum-tracker {
            margin-top: 30px;
        }
        
        .momentum-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 8px;
            margin-bottom: 10px;
        }
        
        .momentum-bar {
            width: 100px;
            height: 20px;
            background: #333;
            border-radius: 10px;
            overflow: hidden;
            position: relative;
        }
        
        .momentum-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff4444, #ffaa00, #00ff88);
            transition: width 0.3s ease;
        }
        
        .alert-banner {
            position: fixed;
            top: 70px;
            left: 50%;
            transform: translateX(-50%);
            background: #00ff88;
            color: #000;
            padding: 15px 30px;
            border-radius: 30px;
            font-weight: bold;
            box-shadow: 0 4px 20px rgba(0, 255, 136, 0.5);
            animation: alertPop 0.5s ease-out;
            z-index: 1000;
        }
        
        @keyframes alertPop {
            from {
                transform: translateX(-50%) translateY(-100px);
                opacity: 0;
            }
            to {
                transform: translateX(-50%) translateY(0);
                opacity: 1;
            }
        }
        
        .performance-grid {
            grid-column: 1 / -1;
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-top: 20px;
        }
        
        .performance-card {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 12px;
            padding: 20px;
        }
        
        .metric-row {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #222;
        }
        
        .metric-row:last-child {
            border-bottom: none;
        }
        
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #333;
            border-top-color: #00ff88;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <header class="header">
            <div class="logo">⚡ Fast Meme Trading</div>
            <div class="status">
                <div class="status-item">
                    <div class="status-indicator"></div>
                    <span id="connectionStatus">Connected</span>
                </div>
                <div class="status-item">
                    <span id="analysisSpeed">0ms avg</span>
                </div>
                <div class="status-item">
                    <span id="currentTime">00:00:00</span>
                </div>
            </div>
        </header>
        
        <main class="main-content">
            <!-- Stats Grid -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-label">Tokens/Hour</div>
                    <div class="stat-value" id="tokensPerHour">0</div>
                    <div class="stat-change positive">↑ 0%</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Hit Rate</div>
                    <div class="stat-value" id="hitRate">0%</div>
                    <div class="stat-change neutral">→ 0%</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Opportunities</div>
                    <div class="stat-value positive" id="opportunities">0</div>
                    <div class="stat-change">Last hour</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Avg Score</div>
                    <div class="stat-value" id="avgScore">0</div>
                    <div class="stat-change">All tokens</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Win Rate</div>
                    <div class="stat-value" id="winRate">0%</div>
                    <div class="stat-change">Paper trades</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">P&L</div>
                    <div class="stat-value" id="profitLoss">$0</div>
                    <div class="stat-change positive">↑ 0%</div>
                </div>
            </div>
            
            <!-- Charts -->
            <div class="chart-container">
                <h3 class="chart-title">Momentum Flow (Real-Time)</h3>
                <canvas id="momentumChart" height="180"></canvas>
            </div>
            
            <div class="chart-container">
                <h3 class="chart-title">Score Distribution</h3>
                <canvas id="scoreChart" height="180"></canvas>
            </div>
            
            <!-- Opportunities -->
            <div class="opportunities-container">
                <h3 class="chart-title">🎯 Live Opportunities</h3>
                <div class="opportunity-list" id="opportunityList">
                    <!-- Opportunities will be added here -->
                </div>
            </div>
        </main>
        
        <aside class="sidebar">
            <!-- Live Feed -->
            <div class="feed-title">
                <div class="live-indicator"></div>
                Live Feed
            </div>
            <div class="live-feed" id="liveFeed">
                <!-- Feed items will be added here -->
            </div>
            
            <!-- Momentum Tracker -->
            <div class="momentum-tracker">
                <div class="feed-title">📈 Momentum Tracker</div>
                <div id="momentumTracker">
                    <!-- Momentum items will be added here -->
                </div>
            </div>
        </aside>
    </div>
    
    <script>
        // Socket.IO connection
        const socket = io();
        
        // Chart contexts
        const momentumCtx = document.getElementById('momentumChart').getContext('2d');
        const scoreCtx = document.getElementById('scoreChart').getContext('2d');
        
        // Data storage
        const momentumData = {
            labels: [],
            datasets: [{
                label: 'Momentum Score',
                data: [],
                borderColor: '#00ff88',
                backgroundColor: 'rgba(0, 255, 136, 0.1)',
                tension: 0.4
            }]
        };
        
        const scoreData = {
            labels: ['0-20', '20-40', '40-60', '60-80', '80-100'],
            datasets: [{
                label: 'Token Distribution',
                data: [0, 0, 0, 0, 0],
                backgroundColor: ['#ff4444', '#ff8844', '#ffaa00', '#88ff00', '#00ff88']
            }]
        };
        
        // Initialize charts
        const momentumChart = new Chart(momentumCtx, {
            type: 'line',
            data: momentumData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        grid: { color: '#333' },
                        ticks: { color: '#888' }
                    },
                    x: {
                        grid: { color: '#333' },
                        ticks: { color: '#888' }
                    }
                },
                plugins: {
                    legend: { display: false }
                }
            }
        });
        
        const scoreChart = new Chart(scoreCtx, {
            type: 'bar',
            data: scoreData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: { color: '#333' },
                        ticks: { color: '#888' }
                    },
                    x: {
                        grid: { display: false },
                        ticks: { color: '#888' }
                    }
                },
                plugins: {
                    legend: { display: false }
                }
            }
        });
        
        // Update time
        setInterval(() => {
            document.getElementById('currentTime').textContent = new Date().toLocaleTimeString();
        }, 1000);
        
        // Socket event handlers
        socket.on('connect', () => {
            console.log('Connected to server');
            addFeedItem('System connected', 'success');
        });
        
        socket.on('live-opportunity', (opportunity) => {
            addOpportunity(opportunity);
            updateStats(opportunity);
            
            // Show alert for high-score opportunities
            if (opportunity.analysis.scores?.overall >= 70) {
                showAlert(`🚀 HIGH SCORE: ${opportunity.token.symbol} - ${opportunity.analysis.scores.overall}/100`);
            }
        });
        
        socket.on('momentum-update', (data) => {
            updateMomentumChart(data);
            updateMomentumTracker(data);
        });
        
        socket.on('stats-update', (stats) => {
            updateDashboardStats(stats);
        });
        
        socket.on('feed-update', (update) => {
            addFeedItem(update.message, update.type);
        });
        
        // Functions
        function addOpportunity(opportunity) {
            const list = document.getElementById('opportunityList');
            const score = opportunity.analysis.scores?.overall || 0;
            const isHighScore = score >= 70;
            
            const card = document.createElement('div');
            card.className = `opportunity-card ${isHighScore ? 'high-score' : ''}`;
            
            card.innerHTML = `
                <div class="opportunity-score ${getScoreClass(score)}">${score}</div>
                <div class="opportunity-details">
                    <div class="opportunity-symbol">${opportunity.token.symbol}</div>
                    <div class="opportunity-metrics">
                        <span>💧 $${formatNumber(opportunity.token.liquidity)}</span>
                        <span>📈 ${opportunity.analysis.scores?.momentum || 0}</span>
                        <span>🐋 ${opportunity.analysis.scores?.whale || 0}</span>
                        <span>⚡ ${opportunity.analysisTime || 0}ms</span>
                    </div>
                </div>
                <div class="opportunity-action">
                    <div class="recommendation ${getRecommendationClass(opportunity.analysis.recommendation?.action)}">
                        ${opportunity.analysis.recommendation?.action || 'SKIP'}
                    </div>
                    <div style="font-size: 12px; color: #888;">
                        ${Math.round((opportunity.analysis.confidence || 0) * 100)}% confidence
                    </div>
                </div>
            `;
            
            list.insertBefore(card, list.firstChild);
            
            // Keep only last 20 opportunities
            while (list.children.length > 20) {
                list.removeChild(list.lastChild);
            }
            
            // Update score distribution
            updateScoreDistribution(score);
        }
        
        function updateMomentumChart(data) {
            if (momentumData.labels.length > 50) {
                momentumData.labels.shift();
                momentumData.datasets[0].data.shift();
            }
            
            momentumData.labels.push(new Date().toLocaleTimeString());
            momentumData.datasets[0].data.push(data.momentum || 0);
            momentumChart.update();
        }
        
        function updateMomentumTracker(data) {
            const tracker = document.getElementById('momentumTracker');
            
            // Clear existing items
            tracker.innerHTML = '';
            
            // Add top 5 momentum tokens
            if (data.tokens) {
                data.tokens.slice(0, 5).forEach(token => {
                    const item = document.createElement('div');
                    item.className = 'momentum-item';
                    
                    const momentum = Math.min(100, Math.max(0, token.momentum));
                    
                    item.innerHTML = `
                        <span>${token.symbol}</span>
                        <div class="momentum-bar">
                            <div class="momentum-fill" style="width: ${momentum}%"></div>
                        </div>
                        <span>${momentum.toFixed(0)}%</span>
                    `;
                    
                    tracker.appendChild(item);
                });
            }
        }
        
        function updateScoreDistribution(score) {
            const index = Math.floor(score / 20);
            if (index >= 0 && index < 5) {
                scoreData.datasets[0].data[index]++;
                scoreChart.update();
            }
        }
        
        function addFeedItem(message, type = 'info') {
            const feed = document.getElementById('liveFeed');
            const item = document.createElement('div');
            item.className = 'feed-item';
            
            const time = new Date().toLocaleTimeString();
            item.innerHTML = `
                <div class="feed-time">${time}</div>
                <div>${message}</div>
            `;
            
            feed.insertBefore(item, feed.firstChild);
            
            // Keep only last 50 items
            while (feed.children.length > 50) {
                feed.removeChild(feed.lastChild);
            }
        }
        
        function updateDashboardStats(stats) {
            // Update all stat cards
            if (stats.tokensPerHour !== undefined) {
                document.getElementById('tokensPerHour').textContent = stats.tokensPerHour;
            }
            if (stats.hitRate !== undefined) {
                document.getElementById('hitRate').textContent = stats.hitRate + '%';
            }
            if (stats.opportunities !== undefined) {
                document.getElementById('opportunities').textContent = stats.opportunities;
            }
            if (stats.avgScore !== undefined) {
                document.getElementById('avgScore').textContent = stats.avgScore;
            }
            if (stats.winRate !== undefined) {
                document.getElementById('winRate').textContent = stats.winRate + '%';
            }
            if (stats.profitLoss !== undefined) {
                const plElement = document.getElementById('profitLoss');
                plElement.textContent = '$' + formatNumber(stats.profitLoss);
                plElement.className = stats.profitLoss >= 0 ? 'stat-value positive' : 'stat-value negative';
            }
            if (stats.analysisSpeed !== undefined) {
                document.getElementById('analysisSpeed').textContent = stats.analysisSpeed + 'ms avg';
            }
        }
        
        function showAlert(message) {
            const alert = document.createElement('div');
            alert.className = 'alert-banner';
            alert.textContent = message;
            document.body.appendChild(alert);
            
            setTimeout(() => {
                alert.remove();
            }, 5000);
        }
        
        function getScoreClass(score) {
            if (score >= 80) return 'positive';
            if (score >= 60) return 'neutral';
            return 'negative';
        }
        
        function getRecommendationClass(action) {
            switch(action) {
                case 'BUY':
                case 'STRONG_BUY':
                    return 'buy';
                case 'WATCH':
                    return 'watch';
                default:
                    return 'skip';
            }
        }
        
        function formatNumber(num) {
            if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
            if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
            return num.toFixed(0);
        }
        
        // Initial stats request
        fetch('/api/stats')
            .then(res => res.json())
            .then(stats => updateDashboardStats(stats));
        
        // Request live feed subscription
        socket.emit('subscribe', 'live-feed');
        socket.emit('subscribe', 'momentum-updates');
    </script>
</body>
</html> 